// Enhanced features for blog posts
(function() {
    'use strict';

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    function addIconsToHeadings() {
        const headings = document.querySelectorAll('.post-content h2, .post-content h3');

        const iconMap = {
            '–æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è': 'icon-concepts',
            '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞': 'icon-architecture',
            '–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã': 'icon-components',
            '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': 'icon-security',
            'security': 'icon-security',
            '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': 'icon-performance',
            'performance': 'icon-performance',
            'api': 'icon-api',
            '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö': 'icon-database',
            'database': 'icon-database',
            '—Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ': 'icon-deployment',
            'deployment': 'icon-deployment',
            '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ': 'icon-testing',
            'testing': 'icon-testing',
            '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è': 'icon-documentation',
            'documentation': 'icon-documentation',
            '–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥': 'icon-monitoring',
            'monitoring': 'icon-monitoring',
            '–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è': 'icon-configuration',
            'configuration': 'icon-configuration',
            '–∑–∞–∫–ª—é—á–µ–Ω–∏–µ': 'icon-conclusion',
            'conclusion': 'icon-conclusion',
            '–º–µ—Ç–æ–¥–∏–∫–∞': 'icon-methodology',
            'methodology': 'icon-methodology',
            '–ø—Ä–∏–º–µ—Ä—ã': 'icon-examples',
            'examples': 'icon-examples',
            '–∞–ª–≥–æ—Ä–∏—Ç–º': 'icon-algorithms',
            'algorithms': 'icon-algorithms',
            '—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è': 'icon-implementation',
            'implementation': 'icon-implementation',
            '–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞': 'icon-benefits',
            'benefits': 'icon-benefits',
            '—Ä–∏—Å–∫–∏': 'icon-risks',
            'risks': 'icon-risks',
            'faq': 'icon-faq',
            '—á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã': 'icon-faq'
        };

        headings.forEach(heading => {
            const text = heading.textContent.toLowerCase();
            for (const [keyword, className] of Object.entries(iconMap)) {
                if (text.includes(keyword)) {
                    heading.classList.add(className);
                    break;
                }
            }
        });
    }

    // –¶–≤–µ—Ç–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    function addComplexityColors() {
        const content = document.querySelector('.post-content');
        if (!content) return;

        // –ù–∞–π—Ç–∏ –∏ –ø–æ–∫—Ä–∞—Å–∏—Ç—å —ç–º–æ–¥–∑–∏ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        const walker = document.createTreeWalker(
            content,
            NodeFilter.SHOW_TEXT,
            null,
            false
        );

        const textNodes = [];
        let node;
        while (node = walker.nextNode()) {
            textNodes.push(node);
        }

        textNodes.forEach(textNode => {
            if (textNode.textContent.includes('üü¢')) {
                const span = document.createElement('span');
                span.className = 'complexity-basic';
                span.textContent = textNode.textContent;
                textNode.parentNode.replaceChild(span, textNode);
            } else if (textNode.textContent.includes('üü°')) {
                const span = document.createElement('span');
                span.className = 'complexity-intermediate';
                span.textContent = textNode.textContent;
                textNode.parentNode.replaceChild(span, textNode);
            } else if (textNode.textContent.includes('üî¥')) {
                const span = document.createElement('span');
                span.className = 'complexity-advanced';
                span.textContent = textNode.textContent;
                textNode.parentNode.replaceChild(span, textNode);
            }
        });
    }


    // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —á—Ç–µ–Ω–∏—è
    function addReadingProgressBar() {
        const progressBar = document.createElement('div');
        progressBar.className = 'reading-progress';
        progressBar.innerHTML = '<div class="reading-progress-fill"></div>';
        document.body.appendChild(progressBar);

        const progressFill = progressBar.querySelector('.reading-progress-fill');

        function updateProgress() {
            const windowHeight = window.innerHeight;
            const documentHeight = document.documentElement.scrollHeight - windowHeight;
            const scrollTop = window.pageYOffset;
            const progress = (scrollTop / documentHeight) * 100;

            progressFill.style.width = Math.min(progress, 100) + '%';
        }

        window.addEventListener('scroll', updateProgress);
        updateProgress();
    }

    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–≤–µ—Ä—Ö"
    function addScrollToTopButton() {
        const button = document.createElement('button');
        button.className = 'scroll-to-top';
        button.innerHTML = '‚Üë';
        button.setAttribute('aria-label', '–ü—Ä–æ–∫—Ä—É—Ç–∏—Ç—å –Ω–∞–≤–µ—Ä—Ö');
        button.style.display = 'none';
        document.body.appendChild(button);

        function toggleButton() {
            if (window.pageYOffset > 300) {
                button.style.display = 'block';
            } else {
                button.style.display = 'none';
            }
        }

        button.addEventListener('click', () => {
            window.scrollTo({
                top: 0,
                behavior: 'smooth'
            });
        });

        window.addEventListener('scroll', toggleButton);
    }

    // Lazy loading –¥–ª—è Mermaid –¥–∏–∞–≥—Ä–∞–º–º
    function addLazyLoadingForDiagrams() {
        const mermaidElements = document.querySelectorAll('.mermaid');

        if ('IntersectionObserver' in window) {
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const element = entry.target;
                        if (!element.classList.contains('mermaid-loaded')) {
                            element.classList.add('mermaid-loaded');
                            // Mermaid —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω Hugo, –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π
                        }
                        observer.unobserve(element);
                    }
                });
            }, {
                rootMargin: '50px'
            });

            mermaidElements.forEach(element => {
                observer.observe(element);
            });
        }
    }

    // –ö–∞—Å—Ç–æ–º–Ω—ã–π Table of Contents
    function addCustomTOC() {
        const content = document.querySelector('.post-content');
        if (!content) return;

        const headings = content.querySelectorAll('h2, h3, h4');
        if (headings.length < 3) return; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ToC —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–æ–ª—å—à–µ 2

        // –°–æ–∑–¥–∞–µ–º ID –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        headings.forEach((heading, index) => {
            if (!heading.id) {
                const text = heading.textContent.toLowerCase()
                    .replace(/[#üìñüü¢üü°üî¥üèóÔ∏èüîÑüóÑÔ∏è‚òÅÔ∏èü§ñüìä]/g, '') // —É–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å–∏–º–≤–æ–ª—ã
                    .replace(/[^\w\s-]/g, '') // —É–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                    .replace(/\s+/g, '-') // –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
                    .replace(/-+/g, '-') // —É–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –¥–µ—Ñ–∏—Å—ã
                    .trim();
                heading.id = text || `heading-${index}`;
            }
        });

        // –°–æ–∑–¥–∞–µ–º ToC –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const tocContainer = document.createElement('div');
        tocContainer.className = 'custom-toc';
        tocContainer.innerHTML = `
            <details open>
                <summary>
                    <span>üìë –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</span>
                    <span class="toc-toggle">‚ñº</span>
                </summary>
                <nav class="toc-nav">
                    <ul class="toc-list"></ul>
                </nav>
            </details>
        `;

        // –ó–∞–ø–æ–ª–Ω—è–µ–º ToC
        const tocList = tocContainer.querySelector('.toc-list');
        let currentLevel = 2;
        let currentUL = tocList;
        const ulStack = [tocList];

        headings.forEach(heading => {
            const level = parseInt(heading.tagName.charAt(1));
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —ç–º–æ–¥–∑–∏ –∏ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ ToC
            const text = heading.textContent
                .replace(/[#üìñüü¢üü°üî¥üèóÔ∏èüîÑüóÑÔ∏è‚òÅÔ∏èü§ñüìä‚ö°üîåüöÄüß™‚öôÔ∏è‚úÖüî¨üíºüßÆüéØ‚ö†Ô∏è‚ùì]/g, '')
                .trim();
            const id = heading.id;

            // –£–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é
            if (level > currentLevel) {
                // –£–≥–ª—É–±–ª—è–µ–º—Å—è
                const lastLi = currentUL.lastElementChild;
                if (lastLi) {
                    let nestedUL = lastLi.querySelector('ul');
                    if (!nestedUL) {
                        nestedUL = document.createElement('ul');
                        nestedUL.className = 'toc-nested';
                        lastLi.appendChild(nestedUL);
                    }
                    ulStack.push(nestedUL);
                    currentUL = nestedUL;
                }
            } else if (level < currentLevel) {
                // –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è
                const levelDiff = currentLevel - level;
                for (let i = 0; i < levelDiff && ulStack.length > 1; i++) {
                    ulStack.pop();
                }
                currentUL = ulStack[ulStack.length - 1];
            }

            currentLevel = level;

            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç ToC
            const li = document.createElement('li');
            li.className = `toc-level-${level}`;
            li.innerHTML = `<a href="#${id}" class="toc-link">${text}</a>`;
            currentUL.appendChild(li);
        });

        // –í—Å—Ç–∞–≤–ª—è–µ–º ToC –≤ –Ω–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const firstElement = content.firstElementChild;
        if (firstElement) {
            content.insertBefore(tocContainer, firstElement);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        const summary = tocContainer.querySelector('summary');
        const toggle = tocContainer.querySelector('.toc-toggle');
        const details = tocContainer.querySelector('details');

        summary.addEventListener('click', (e) => {
            e.preventDefault();
            if (details.open) {
                details.removeAttribute('open');
                toggle.textContent = '‚ñ∂';
            } else {
                details.setAttribute('open', '');
                toggle.textContent = '‚ñº';
            }
        });

        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ–∫—Ü–∏–∏
        const tocLinks = tocContainer.querySelectorAll('.toc-link');
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    tocLinks.forEach(link => link.classList.remove('active'));
                    const activeLink = tocContainer.querySelector(`a[href="#${entry.target.id}"]`);
                    if (activeLink) {
                        activeLink.classList.add('active');
                    }
                }
            });
        }, {
            rootMargin: '-10% 0px -50% 0px'
        });

        headings.forEach(heading => {
            observer.observe(heading);
        });
    }

    // –£–ª—É—á—à–µ–Ω–Ω—ã–µ —è–∫–æ—Ä–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    function enhanceAnchorLinks() {
        const headings = document.querySelectorAll('.post-content h2, .post-content h3, .post-content h4');

        headings.forEach(heading => {
            if (heading.id) {
                const anchor = document.createElement('a');
                anchor.href = '#' + heading.id;
                anchor.className = 'anchor-link';
                anchor.innerHTML = 'üîó';
                anchor.setAttribute('aria-label', '–°—Å—ã–ª–∫–∞ –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª');
                anchor.style.opacity = '0';
                anchor.style.marginLeft = '8px';
                anchor.style.textDecoration = 'none';
                anchor.style.transition = 'opacity 0.2s';

                heading.addEventListener('mouseenter', () => {
                    anchor.style.opacity = '0.7';
                });

                heading.addEventListener('mouseleave', () => {
                    anchor.style.opacity = '0';
                });

                heading.appendChild(anchor);
            }
        });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
    function init() {
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', init);
            return;
        }

        addIconsToHeadings();
        addComplexityColors();
        addCustomTOC();
        addReadingProgressBar();
        addScrollToTopButton();
        addLazyLoadingForDiagrams();
        enhanceAnchorLinks();
    }

    init();
})();